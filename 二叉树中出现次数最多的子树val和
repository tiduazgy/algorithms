/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    HashMap<Integer,Integer> countSum = new HashMap<>();
    int maxCount = 0;
    public int[] findFrequentTreeSum(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        postOrder(root);
        for(int sum : countSum.keySet()){
            if(countSum.get(sum) == maxCount)list.add(sum);
        }
        int[] result = new int[list.size()];
        for(int i = 0 ;i < list.size();i++){
            result[i] = list.get(i);
        }
        
        return result;
    }
    
    private int postOrder(TreeNode root){
        if(root == null)return 0;
        int sum = postOrder(root.left) + postOrder(root.right) + root.val;
        int count = countSum.getOrDefault(sum,0) + 1;
        maxCount = Math.max(maxCount,count);
        countSum.put(sum,count);
        return sum;
    }
}
